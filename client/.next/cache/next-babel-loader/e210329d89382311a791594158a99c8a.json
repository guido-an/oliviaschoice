{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nvar service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\n\nvar Private = function Private() {\n  var _useState = useState(false),\n      proceed = _useState[0],\n      setProceed = _useState[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    // Create an scoped async function in the hook\n    function checkIfAdmin() {\n      return _checkIfAdmin.apply(this, arguments);\n    } // Execute the created function directly\n\n\n    function _checkIfAdmin() {\n      _checkIfAdmin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return service.get('/admin/get-admin');\n\n              case 3:\n                res = _context.sent;\n\n                if (res.data.admin) {\n                  setProceed(true);\n                } else {}\n\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n      return _checkIfAdmin.apply(this, arguments);\n    }\n\n    checkIfAdmin();\n  }, []);\n\n  if (!proceed) {\n    return __jsx(\"p\", null);\n  }\n\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"Private\"));\n};\n\nexport default Private;","map":null,"metadata":{},"sourceType":"module"}