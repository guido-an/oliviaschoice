{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nexport var CartContext = /*#__PURE__*/createContext();\nvar service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\n\nvar CartContextProvider = function CartContextProvider(props) {\n  var _useState = useState([]),\n      productsInCart = _useState[0],\n      setProductsInCart = _useState[1];\n\n  var _useState2 = useState(0),\n      totalPrice = _useState2[0],\n      setTotalPrice = _useState2[1];\n\n  var _useState3 = useState(false),\n      renderPage = _useState3[0],\n      setRenderPage = _useState3[1]; // without this localStorage in addProductToLocalStorage would be undefined (rendered on the server)\n\n\n  var _useState4 = useState(null),\n      shippingInfo = _useState4[0],\n      setShippingInfo = _useState4[1]; // for getting shipping info on checkout page\n\n\n  useEffect(function () {\n    var productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'));\n    setProductsInCart(productsFromLocalStorage);\n    setRenderPage(true);\n  }, []);\n\n  var addProductToLocalStorage = function addProductToLocalStorage() {\n    if (renderPage) {\n      localStorage.setItem('productsInCart', JSON.stringify(productsInCart));\n    }\n  };\n\n  var addToCart = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(product, quantityFromInput) {\n      var productIsInCart;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              productIsInCart = false;\n              productsInCart && productsInCart.forEach(function (productInCart) {\n                if (productInCart._id === product._id) {\n                  productIsInCart = true;\n                  product.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput);\n\n                  if (product.boughtQuantity > product.effectiveStock) {\n                    // to avoid adding\n                    product.boughtQuantity = product.effectiveStock;\n                  }\n                }\n              });\n\n              if (!productsInCart) {\n                product.boughtQuantity = Number(quantityFromInput);\n                setProductsInCart([product]);\n              } else if (productIsInCart) {\n                setProductsInCart(_toConsumableArray(productsInCart));\n              } else {\n                product.boughtQuantity = Number(quantityFromInput);\n                setProductsInCart([].concat(_toConsumableArray(productsInCart), [product]));\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function addToCart(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(); // it needs to be called when addToCart finish executing\n\n\n  addProductToLocalStorage();\n\n  var updateCart = function updateCart(productInCart, quantityFromInput) {\n    var updateArray = productsInCart.map(function (product) {\n      if (product._id === productInCart._id) {\n        product.boughtQuantity = Number(quantityFromInput);\n      }\n\n      return product;\n    });\n    setProductsInCart(updateArray);\n  };\n\n  var calculateTotalPrice = function calculateTotalPrice() {\n    console.log(productsInCart, 'productsIn cart cart context');\n\n    if (!productsInCart) {\n      return;\n    }\n\n    var sumPrice = 0;\n    productsInCart.forEach(function (product) {\n      sumPrice += product.boughtQuantity * product.price;\n    });\n    setTotalPrice(sumPrice);\n  };\n\n  return __jsx(CartContext.Provider, {\n    value: {\n      productsInCart: productsInCart,\n      totalPrice: totalPrice,\n      shippingInfo: shippingInfo,\n      setProductsInCart: setProductsInCart,\n      addToCart: addToCart,\n      updateCart: updateCart,\n      setTotalPrice: setTotalPrice,\n      setShippingInfo: setShippingInfo,\n      calculateTotalPrice: calculateTotalPrice\n    }\n  }, props.children);\n};\n\nexport default CartContextProvider;","map":null,"metadata":{},"sourceType":"module"}