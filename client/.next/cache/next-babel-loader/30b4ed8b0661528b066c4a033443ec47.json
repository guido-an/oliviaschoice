{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport ImageUploading from \"react-images-uploading\";\nimport storage from \"../../firebase/index\";\nimport axios from 'axios';\nvar service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\n\nvar imageUpload = function imageUpload() {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      images = _React$useState2[0],\n      setImages = _React$useState2[1];\n\n  var maxNumber = 69;\n\n  var onChange = function onChange(imageList) {\n    setImages(imageList);\n  };\n\n  var onImageSave = function onImageSave(e) {\n    // data for submit\n    var saveImages = images;\n    saveImages.forEach(function (image) {\n      handleUpload(image);\n    });\n  };\n\n  var putImageOnProduct = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, name) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return service.post('/api/product/update', {\n                url: url,\n                name: name\n              });\n\n            case 2:\n              response = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function putImageOnProduct(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleUpload = function handleUpload(imageToUpload) {\n    if (imageToUpload) {\n      var image = imageToUpload.file;\n      var uploadTask = storage.ref(\"images/\".concat(image.name)).put(image);\n      uploadTask.on(\"state_changed\",\n      /*  snapshot => {\n         // progress function ...\n         const progress = Math.round(\n           (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n         );\n         //this.setState({ progress });\n       },\n       error => {\n         // Error function ...\n         console.log(error);\n       }, */\n      function () {\n        // complete function ...\n        storage.ref(\"images\").child(image.name).getDownloadURL().then(function (url) {\n          putImageOnProduct(url, image.name);\n        });\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"App\"\n  }, __jsx(ImageUploading, {\n    multiple: true,\n    value: images,\n    onChange: onChange,\n    maxNumber: maxNumber,\n    dataURLKey: \"data_url\"\n  }, function (_ref2) {\n    var imageList = _ref2.imageList,\n        onImageUpload = _ref2.onImageUpload,\n        onImageRemoveAll = _ref2.onImageRemoveAll,\n        onImageRemove = _ref2.onImageRemove,\n        isDragging = _ref2.isDragging,\n        dragProps = _ref2.dragProps;\n    return (// write your building UI\n      __jsx(\"div\", {\n        className: \"upload__image-wrapper\"\n      }, __jsx(\"button\", _extends({\n        style: isDragging ? {\n          color: \"red\"\n        } : undefined,\n        onClick: onImageUpload\n      }, dragProps), \"Click or Drop here\"), \"\\xA0\", __jsx(\"button\", {\n        onClick: onImageRemoveAll\n      }, \"Remove all images\"), imageList.map(function (image, index) {\n        return __jsx(\"div\", {\n          key: index,\n          className: \"image-item\"\n        }, __jsx(\"img\", {\n          src: image[\"data_url\"],\n          alt: \"\",\n          width: \"100\"\n        }), __jsx(\"div\", {\n          className: \"image-item__btn-wrapper\"\n        }, __jsx(\"button\", {\n          onClick: function onClick() {\n            return onImageRemove(index);\n          }\n        }, \"Remove\")));\n      }))\n    );\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return onImageSave();\n    }\n  }, \"Save\"));\n};\n\nexport default imageUpload;","map":null,"metadata":{},"sourceType":"module"}