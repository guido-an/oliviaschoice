{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useContext } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from 'axios';\nconst service = axios.create({\n  // to update the order\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\nexport default function CheckoutForm() {\n  const {\n    0: succeeded,\n    1: setSucceeded\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: processing,\n    1: setProcessing\n  } = useState('');\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(true);\n  const {\n    0: clientSecret,\n    1: setClientSecret\n  } = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart')); // Create PaymentIntent as soon as the page loads\n\n    window.fetch(process.env.APP_API + '/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        items: productsFromLocalStorage\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: '#32325d',\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#32325d'\n        }\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : '');\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: 'test@gmail.com',\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true); // Our code\n\n      var orderId = localStorage.getItem('orderId');\n      service.post('/update-order', {\n        _id: orderId\n      });\n      localStorage.removeItem('productsInCart');\n      localStorage.removeItem('orderId');\n      window.location.assign(\"/\");\n    } // end\n\n  };\n\n  return __jsx(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit\n  }, __jsx(CardElement, {\n    id: \"card-element\",\n    options: cardStyle,\n    onChange: handleChange\n  }), __jsx(\"button\", {\n    disabled: processing || disabled || succeeded,\n    id: \"submit\"\n  }, __jsx(\"span\", {\n    id: \"button-text\"\n  }, processing ? __jsx(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\"\n  }) : 'Pay')), error && __jsx(\"div\", {\n    className: \"card-error\",\n    role: \"alert\"\n  }, error), __jsx(\"p\", {\n    className: succeeded ? 'result-message' : 'result-message hidden'\n  }, \"Payment succeeded, see the result in your\", __jsx(\"a\", {\n    href: \"https://dashboard.stripe.com/test/payments\"\n  }, ' ', \"Stripe dashboard.\"), \" Refresh the page to pay again.\"));\n}","map":null,"metadata":{},"sourceType":"module"}