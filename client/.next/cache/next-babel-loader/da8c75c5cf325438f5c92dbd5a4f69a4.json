{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nexport const CartContext = /*#__PURE__*/createContext();\nconst service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\n\nconst CartContextProvider = props => {\n  const {\n    0: productsInCart,\n    1: setProductsInCart\n  } = useState([]);\n  const {\n    0: totalPrice,\n    1: setTotalPrice\n  } = useState(0);\n  const {\n    0: renderPage,\n    1: setRenderPage\n  } = useState(false); // without this localStorage in addProductToLocalStorage would be undefined (rendered on the server)\n\n  const {\n    0: shippingInfo,\n    1: setShippingInfo\n  } = useState(null); // for getting shipping info on checkout page\n\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'));\n    setProductsInCart(productsFromLocalStorage);\n    setRenderPage(true);\n  }, []);\n\n  const addProductToLocalStorage = () => {\n    if (renderPage) {\n      localStorage.setItem('productsInCart', JSON.stringify(productsInCart));\n    }\n  };\n\n  const addToCart = async (product, quantityFromInput) => {\n    let productIsInCart = false;\n    productsInCart && productsInCart.forEach(productInCart => {\n      if (productInCart._id === product._id) {\n        productIsInCart = true;\n        product.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput);\n\n        if (product.boughtQuantity > product.effectiveStock) {\n          // to avoid adding\n          product.boughtQuantity = product.effectiveStock;\n        }\n      }\n    });\n\n    if (!productsInCart) {\n      product.boughtQuantity = Number(quantityFromInput);\n      setProductsInCart([product]);\n    } else if (productIsInCart) {\n      setProductsInCart([...productsInCart]);\n    } else {\n      product.boughtQuantity = Number(quantityFromInput);\n      setProductsInCart([...productsInCart, product]);\n    }\n  }; // it needs to be called when addToCart finish executing\n\n\n  addProductToLocalStorage();\n\n  const updateCart = (productInCart, quantityFromInput) => {\n    const updateArray = productsInCart.map(product => {\n      if (product._id === productInCart._id) {\n        product.boughtQuantity = Number(quantityFromInput);\n      }\n\n      return product;\n    });\n    setProductsInCart(updateArray);\n  };\n\n  const calculateTotalPrice = () => {\n    console.log(productsInCart, 'productsIn cart cart context');\n\n    if (!productsInCart) {\n      return;\n    }\n\n    let sumPrice = 0;\n    productsInCart.forEach(product => {\n      sumPrice += product.boughtQuantity * product.price;\n    });\n    setTotalPrice(sumPrice);\n  };\n\n  return __jsx(CartContext.Provider, {\n    value: {\n      productsInCart,\n      totalPrice,\n      shippingInfo,\n      setProductsInCart,\n      addToCart,\n      updateCart,\n      setTotalPrice,\n      setShippingInfo,\n      calculateTotalPrice\n    }\n  }, props.children);\n};\n\nexport default CartContextProvider;","map":null,"metadata":{},"sourceType":"module"}