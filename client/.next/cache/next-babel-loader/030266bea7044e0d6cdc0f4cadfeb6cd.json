{"ast":null,"code":"var _jsxFileName = \"/Users/Guido/Desktop/pharmashop/client/contexts/CartContext.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nexport const CartContext = /*#__PURE__*/createContext();\nconst service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\n\nconst CartContextProvider = props => {\n  const {\n    0: productsInCart,\n    1: setProductsInCart\n  } = useState([]);\n  const {\n    0: renderPage,\n    1: setRenderPage\n  } = useState(false); // without this localStorage in addProductToLocalStorage would be undefined (rendered on the server)\n\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'));\n    setProductsInCart(productsFromLocalStorage);\n    setRenderPage(true);\n  }, []);\n\n  const addProductToLocalStorage = () => {\n    if (renderPage) {\n      console.log('add to local storage', productsInCart);\n      localStorage.setItem('productsInCart', JSON.stringify(productsInCart));\n    }\n  };\n\n  const addToCart = async (product, quantityFromInput) => {\n    let productIsInCart = false;\n    productsInCart && productsInCart.forEach(productInCart => {\n      if (productInCart._id === product._id) {\n        productIsInCart = true;\n        product.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput);\n      }\n    });\n\n    if (!productsInCart) {\n      product.boughtQuantity = Number(quantityFromInput);\n      setProductsInCart([product]);\n    } else if (productIsInCart) {\n      setProductsInCart([...productsInCart]);\n    } else {\n      product.boughtQuantity = Number(quantityFromInput);\n      setProductsInCart([...productsInCart, product]);\n    }\n  }; // it needs to be called when addToCart finish executing\n\n\n  addProductToLocalStorage();\n\n  const updateCart = (productInCart, quantityFromInput) => {\n    console.log(productInCart, quantityFromInput);\n    productInCart.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput);\n    setProductsInCart([...productsInCart]);\n  };\n\n  return __jsx(CartContext.Provider, {\n    value: {\n      productsInCart,\n      setProductsInCart,\n      addToCart,\n      updateCart\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CartContextProvider;","map":{"version":3,"sources":["/Users/Guido/Desktop/pharmashop/client/contexts/CartContext.js"],"names":["createContext","useState","useEffect","axios","CartContext","service","create","baseURL","process","env","APP_API","withCredentials","CartContextProvider","props","productsInCart","setProductsInCart","renderPage","setRenderPage","productsFromLocalStorage","JSON","parse","localStorage","getItem","addProductToLocalStorage","console","log","setItem","stringify","addToCart","product","quantityFromInput","productIsInCart","forEach","productInCart","_id","boughtQuantity","Number","updateCart","children"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from 'react'\nimport axios from 'axios'\n\nexport const CartContext = createContext()\n\nconst service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n})\n\nconst CartContextProvider = props => {\n  const [productsInCart, setProductsInCart] = useState([])\n  const [renderPage, setRenderPage] = useState(false) // without this localStorage in addProductToLocalStorage would be undefined (rendered on the server)\n\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'))\n    setProductsInCart(productsFromLocalStorage)\n    setRenderPage(true)\n  }, [])\n\n  const addProductToLocalStorage = () => {\n    if (renderPage) {\n      console.log('add to local storage', productsInCart)\n      localStorage.setItem('productsInCart', JSON.stringify(productsInCart))\n    }\n  }\n\n  const addToCart = async (product, quantityFromInput) => {\n    let productIsInCart = false\n    productsInCart && productsInCart.forEach(productInCart => {\n      if (productInCart._id === product._id) {\n        productIsInCart = true\n        product.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput)\n      }\n    })\n    if (!productsInCart) {\n      product.boughtQuantity = Number(quantityFromInput)\n      setProductsInCart([product])\n    } else if (productIsInCart) {\n      setProductsInCart([...productsInCart])\n    } else {\n      product.boughtQuantity = Number(quantityFromInput)\n      setProductsInCart([...productsInCart, product])\n    }\n  }\n\n  // it needs to be called when addToCart finish executing\n  addProductToLocalStorage()\n\n  const updateCart = (productInCart, quantityFromInput) => {\n    console.log(productInCart, quantityFromInput)\n    productInCart.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput)\n    setProductsInCart([...productsInCart])\n  }\n\n  return (\n    <CartContext.Provider value={{ productsInCart, setProductsInCart, addToCart, updateCart }}>\n      {props.children}\n    </CartContext.Provider>\n  )\n}\n\nexport default CartContextProvider\n"]},"metadata":{},"sourceType":"module"}