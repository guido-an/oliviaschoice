{"ast":null,"code":"var _jsxFileName = \"/Users/Guido/Desktop/pharmashop/client/contexts/CartContext.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nexport const CartContext = /*#__PURE__*/createContext();\nconst service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\n\nconst CartContextProvider = props => {\n  const {\n    0: productsInCart,\n    1: setProductsInCart\n  } = useState([]);\n  const {\n    0: shippingInfo,\n    1: setShippingInfo\n  } = useState(null); // for getting shipping info on checkout page\n\n  const {\n    0: renderPage,\n    1: setRenderPage\n  } = useState(false); // without this localStorage in addProductToLocalStorage would be undefined (rendered on the server)\n\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'));\n    setProductsInCart(productsFromLocalStorage);\n    setRenderPage(true);\n  }, []);\n\n  const addProductToLocalStorage = () => {\n    if (renderPage) {\n      console.log('add to local storage', productsInCart);\n      localStorage.setItem('productsInCart', JSON.stringify(productsInCart));\n    }\n  };\n\n  const addToCart = async (product, quantityFromInput) => {\n    let productIsInCart = false;\n    productsInCart && productsInCart.forEach(productInCart => {\n      if (productInCart._id === product._id) {\n        productIsInCart = true;\n        product.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput);\n      }\n    });\n\n    if (!productsInCart) {\n      product.boughtQuantity = Number(quantityFromInput);\n      setProductsInCart([product]);\n    } else if (productIsInCart) {\n      setProductsInCart([...productsInCart]);\n    } else {\n      product.boughtQuantity = Number(quantityFromInput);\n      setProductsInCart([...productsInCart, product]);\n    }\n  }; // it needs to be called when addToCart finish executing\n\n\n  addProductToLocalStorage();\n\n  const updateCart = (productInCart, quantityFromInput) => {\n    const updateArray = productsInCart.map(product => {\n      if (product._id === productInCart._id) {\n        product.boughtQuantity = Number(quantityFromInput);\n      }\n\n      return product;\n    });\n    setProductsInCart(updateArray);\n  };\n\n  return __jsx(CartContext.Provider, {\n    value: {\n      productsInCart,\n      shippingInfo,\n      setProductsInCart,\n      addToCart,\n      updateCart,\n      setShippingInfo\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CartContextProvider;","map":{"version":3,"sources":["/Users/Guido/Desktop/pharmashop/client/contexts/CartContext.js"],"names":["createContext","useState","useEffect","axios","CartContext","service","create","baseURL","process","env","APP_API","withCredentials","CartContextProvider","props","productsInCart","setProductsInCart","shippingInfo","setShippingInfo","renderPage","setRenderPage","productsFromLocalStorage","JSON","parse","localStorage","getItem","addProductToLocalStorage","console","log","setItem","stringify","addToCart","product","quantityFromInput","productIsInCart","forEach","productInCart","_id","boughtQuantity","Number","updateCart","updateArray","map","children"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from 'react'\nimport axios from 'axios'\n\nexport const CartContext = createContext()\n\nconst service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n})\n\nconst CartContextProvider = props => {\n  const [productsInCart, setProductsInCart] = useState([])\n  const [shippingInfo, setShippingInfo] = useState(null) // for getting shipping info on checkout page\n  const [renderPage, setRenderPage] = useState(false) // without this localStorage in addProductToLocalStorage would be undefined (rendered on the server)\n\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'))\n    setProductsInCart(productsFromLocalStorage)\n    setRenderPage(true)\n  }, [])\n\n  const addProductToLocalStorage = () => {\n    if (renderPage) {\n      console.log('add to local storage', productsInCart)\n      localStorage.setItem('productsInCart', JSON.stringify(productsInCart))\n    }\n  }\n\n  const addToCart = async (product, quantityFromInput) => {\n    let productIsInCart = false\n    productsInCart && productsInCart.forEach(productInCart => {\n      if (productInCart._id === product._id) {\n        productIsInCart = true\n        product.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput)\n      }\n    })\n    if (!productsInCart) {\n      product.boughtQuantity = Number(quantityFromInput)\n      setProductsInCart([product])\n    } else if (productIsInCart) {\n      setProductsInCart([...productsInCart])\n    } else {\n      product.boughtQuantity = Number(quantityFromInput)\n      setProductsInCart([...productsInCart, product])\n    }\n  }\n\n  // it needs to be called when addToCart finish executing\n  addProductToLocalStorage()\n  const updateCart = (productInCart, quantityFromInput) => {\n    const updateArray = productsInCart.map(product => {\n      if (product._id === productInCart._id) {\n        product.boughtQuantity = Number(quantityFromInput)\n      }\n      return product\n    })\n    setProductsInCart(updateArray)\n  }\n\n  return (\n    <CartContext.Provider value={{ productsInCart, shippingInfo, setProductsInCart, addToCart, updateCart, setShippingInfo }}>\n      {props.children}\n    </CartContext.Provider>\n  )\n}\n\nexport default CartContextProvider\n"]},"metadata":{},"sourceType":"module"}