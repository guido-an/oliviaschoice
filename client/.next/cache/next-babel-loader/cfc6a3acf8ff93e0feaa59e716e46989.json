{"ast":null,"code":"var _jsxFileName = \"/Users/Guido/Desktop/pharmashop/client/contexts/CartContext.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nexport const CartContext = /*#__PURE__*/createContext();\nconst service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\n\nconst CartContextProvider = props => {\n  const {\n    0: productsInCart,\n    1: setProductsInCart\n  } = useState([]);\n  const {\n    0: totalPrice,\n    1: setTotalPrice\n  } = useState(0);\n  const {\n    0: renderPage,\n    1: setRenderPage\n  } = useState(false); // without this localStorage in addProductToLocalStorage would be undefined (rendered on the server)\n\n  const {\n    0: shippingInfo,\n    1: setShippingInfo\n  } = useState(null); // for getting shipping info on checkout page\n\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'));\n    setProductsInCart(productsFromLocalStorage);\n    setRenderPage(true);\n  }, []);\n\n  const addProductToLocalStorage = () => {\n    if (renderPage) {\n      console.log('add to local storage', productsInCart);\n      localStorage.setItem('productsInCart', JSON.stringify(productsInCart));\n    }\n  };\n\n  const addToCart = async (product, quantityFromInput) => {\n    let productIsInCart = false;\n    productsInCart && productsInCart.forEach(productInCart => {\n      if (productInCart._id === product._id) {\n        productIsInCart = true;\n        product.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput);\n\n        if (product.boughtQuantity > product.effectiveStock) {\n          // to avoid adding\n          product.boughtQuantity = product.effectiveStock;\n        }\n      }\n    });\n\n    if (!productsInCart) {\n      product.boughtQuantity = Number(quantityFromInput);\n      setProductsInCart([product]);\n    } else if (productIsInCart) {\n      setProductsInCart([...productsInCart]);\n    } else {\n      product.boughtQuantity = Number(quantityFromInput);\n      setProductsInCart([...productsInCart, product]);\n    }\n  }; // it needs to be called when addToCart finish executing\n\n\n  addProductToLocalStorage();\n\n  const updateCart = (productInCart, quantityFromInput) => {\n    const updateArray = productsInCart.map(product => {\n      if (product._id === productInCart._id) {\n        product.boughtQuantity = Number(quantityFromInput);\n      }\n\n      return product;\n    });\n    setProductsInCart(updateArray);\n  };\n\n  const calculateTotalPrice = () => {\n    console.log('calculate price');\n    console.log(productsInCart, 'productsIn cart cart context');\n\n    if (!productsInCart) {\n      return;\n    }\n\n    let sumPrice = 0;\n    productsInCart.forEach(product => {\n      sumPrice += product.boughtQuantity * product.price;\n    });\n    setTotalPrice(sumPrice);\n  };\n\n  return __jsx(CartContext.Provider, {\n    value: {\n      productsInCart,\n      totalPrice,\n      shippingInfo,\n      setProductsInCart,\n      addToCart,\n      updateCart,\n      setTotalPrice,\n      setShippingInfo,\n      calculateTotalPrice\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CartContextProvider;","map":{"version":3,"sources":["/Users/Guido/Desktop/pharmashop/client/contexts/CartContext.js"],"names":["createContext","useState","useEffect","axios","CartContext","service","create","baseURL","process","env","APP_API","withCredentials","CartContextProvider","props","productsInCart","setProductsInCart","totalPrice","setTotalPrice","renderPage","setRenderPage","shippingInfo","setShippingInfo","productsFromLocalStorage","JSON","parse","localStorage","getItem","addProductToLocalStorage","console","log","setItem","stringify","addToCart","product","quantityFromInput","productIsInCart","forEach","productInCart","_id","boughtQuantity","Number","effectiveStock","updateCart","updateArray","map","calculateTotalPrice","sumPrice","price","children"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from 'react'\nimport axios from 'axios'\n\nexport const CartContext = createContext()\n\nconst service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n})\n\nconst CartContextProvider = props => {\n  const [productsInCart, setProductsInCart] = useState([])\n  const [totalPrice, setTotalPrice] = useState(0)\n  const [renderPage, setRenderPage] = useState(false) // without this localStorage in addProductToLocalStorage would be undefined (rendered on the server)\n  const [shippingInfo, setShippingInfo] = useState(null) // for getting shipping info on checkout page\n\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'))\n    setProductsInCart(productsFromLocalStorage)\n    setRenderPage(true)\n  }, [])\n\n  const addProductToLocalStorage = () => {\n    if (renderPage) {\n      console.log('add to local storage', productsInCart)\n      localStorage.setItem('productsInCart', JSON.stringify(productsInCart))\n    }\n  }\n\n  const addToCart = async (product, quantityFromInput) => {\n    let productIsInCart = false\n    productsInCart && productsInCart.forEach(productInCart => {\n      if (productInCart._id === product._id) {\n        productIsInCart = true\n        product.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput)\n        if (product.boughtQuantity > product.effectiveStock) { // to avoid adding\n          product.boughtQuantity = product.effectiveStock\n        }\n      }\n    })\n    if (!productsInCart) {\n      product.boughtQuantity = Number(quantityFromInput)\n      setProductsInCart([product])\n    } else if (productIsInCart) {\n      setProductsInCart([...productsInCart])\n    } else {\n      product.boughtQuantity = Number(quantityFromInput)\n      setProductsInCart([...productsInCart, product])\n    }\n  }\n\n  // it needs to be called when addToCart finish executing\n  addProductToLocalStorage()\n  const updateCart = (productInCart, quantityFromInput) => {\n    const updateArray = productsInCart.map(product => {\n      if (product._id === productInCart._id) {\n        product.boughtQuantity = Number(quantityFromInput)\n      }\n      return product\n    })\n    setProductsInCart(updateArray)\n  }\n\n  const calculateTotalPrice = () => {\n    console.log('calculate price')\n    console.log(productsInCart, 'productsIn cart cart context')\n    if (!productsInCart) {\n      return\n    }\n    let sumPrice = 0\n    productsInCart.forEach(product => {\n      sumPrice += product.boughtQuantity * product.price\n    })\n    setTotalPrice(sumPrice)\n  }\n\n  return (\n    <CartContext.Provider value={{ productsInCart, totalPrice, shippingInfo, setProductsInCart, addToCart, updateCart, setTotalPrice, setShippingInfo, calculateTotalPrice }}>\n      {props.children}\n    </CartContext.Provider>\n  )\n}\n\nexport default CartContextProvider\n"]},"metadata":{},"sourceType":"module"}