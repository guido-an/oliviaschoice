{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/Guido/Desktop/pharmashop/client/components/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useContext } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nvar service = axios.create({\n  // to update the order\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\nexport default function CheckoutForm() {\n  _s();\n\n  var _useState = useState(false),\n      succeeded = _useState[0],\n      setSucceeded = _useState[1];\n\n  var _useState2 = useState(null),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(''),\n      processing = _useState3[0],\n      setProcessing = _useState3[1];\n\n  var _useState4 = useState(true),\n      disabled = _useState4[0],\n      setDisabled = _useState4[1];\n\n  var _useState5 = useState(''),\n      clientSecret = _useState5[0],\n      setClientSecret = _useState5[1];\n\n  var stripe = useStripe();\n  var elements = useElements();\n  var router = useRouter();\n  useEffect(function () {\n    var productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart')); // Create PaymentIntent as soon as the page loads\n\n    window.fetch(process.env.APP_API + '/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        items: productsFromLocalStorage\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  var cardStyle = {\n    style: {\n      base: {\n        color: '#32325d',\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#32325d'\n        }\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n    }\n  };\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Listen for changes in the CardElement\n              // and display any errors as the customer types their card details\n              setDisabled(event.empty);\n              setError(event.error ? event.error.message : '');\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleChange(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ev) {\n      var payload, orderId;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              ev.preventDefault();\n              setProcessing(true);\n              _context2.next = 4;\n              return stripe.confirmCardPayment(clientSecret, {\n                receipt_email: 'test@gmail.com',\n                payment_method: {\n                  card: elements.getElement(CardElement)\n                }\n              });\n\n            case 4:\n              payload = _context2.sent;\n\n              if (payload.error) {\n                setError(\"Payment failed \".concat(payload.error.message));\n                setProcessing(false);\n              } else {\n                setError(null);\n                setProcessing(false);\n                setSucceeded(true); // Our code\n\n                orderId = localStorage.getItem('orderId');\n                service.post('/update-order', {\n                  _id: orderId\n                });\n                localStorage.removeItem('productsInCart');\n                localStorage.removeItem('orderId'); // router.push('/')\n\n                window.location.assign(\"/\");\n              } // end\n\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSubmit(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, __jsx(CardElement, {\n    id: \"card-element\",\n    options: cardStyle,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    disabled: processing || disabled || succeeded,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, processing ? __jsx(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }) : 'Pay')), error && __jsx(\"div\", {\n    className: \"card-error\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, error), __jsx(\"p\", {\n    className: succeeded ? 'result-message' : 'result-message hidden',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, \"Payment succeeded, see the result in your\", __jsx(\"a\", {\n    href: \"https://dashboard.stripe.com/test/payments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, ' ', \"Stripe dashboard.\"), \" Refresh the page to pay again.\"));\n}\n\n_s(CheckoutForm, \"pexsT4+idycuQOb5QQ7V8YlBt5c=\", false, function () {\n  return [useStripe, useElements, useRouter];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/Guido/Desktop/pharmashop/client/components/CheckoutForm.js"],"names":["useState","useEffect","useContext","CardElement","useStripe","useElements","axios","useRouter","service","create","baseURL","process","env","APP_API","withCredentials","CheckoutForm","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","router","productsFromLocalStorage","JSON","parse","localStorage","getItem","window","fetch","method","headers","body","stringify","items","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","confirmCardPayment","receipt_email","payment_method","card","getElement","payload","orderId","post","_id","removeItem","location","assign"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from 'react'\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from '@stripe/react-stripe-js'\nimport axios from 'axios'\n\nimport { useRouter } from 'next/router'\n\n\nconst service = axios.create({ // to update the order\n  baseURL: process.env.APP_API,\n  withCredentials: true\n})\n\n\nexport default function CheckoutForm () {\n  const [succeeded, setSucceeded] = useState(false)\n  const [error, setError] = useState(null)\n  const [processing, setProcessing] = useState('')\n  const [disabled, setDisabled] = useState(true)\n  const [clientSecret, setClientSecret] = useState('')\n  const stripe = useStripe()\n  const elements = useElements()\n\n  const router = useRouter()\n\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'))\n    // Create PaymentIntent as soon as the page loads\n    window\n      .fetch(process.env.APP_API + '/create-payment-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ items: productsFromLocalStorage })\n      })\n      .then(res => {\n        return res.json()\n      })\n      .then(data => {\n        setClientSecret(data.clientSecret)\n      })\n  }, [])\n  const cardStyle = {\n    style: {\n      base: {\n        color: '#32325d',\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#32325d'\n        }\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n    }\n  }\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty)\n    setError(event.error ? event.error.message : '')\n  }\n  const handleSubmit = async ev => {\n    ev.preventDefault()\n    setProcessing(true)\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: 'test@gmail.com',\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    })\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`)\n      setProcessing(false)\n    } else {\n      setError(null)\n      setProcessing(false)\n      setSucceeded(true)\n      // Our code\n      var orderId = localStorage.getItem('orderId')\n      service.post('/update-order', {\n        _id: orderId\n      })\n      localStorage.removeItem('productsInCart') \n      localStorage.removeItem('orderId')\n      // router.push('/')\n      window.location.assign(\"/\");\n    }\n    // end\n  }\n  return (\n    <form id='payment-form' onSubmit={handleSubmit}>\n      <CardElement id='card-element' options={cardStyle} onChange={handleChange} />\n      <button\n        disabled={processing || disabled || succeeded}\n        id='submit'\n      >\n        <span id='button-text'>\n          {processing ? (\n            <div className='spinner' id='spinner' />\n          ) : (\n            'Pay'\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className='card-error' role='alert'>\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      <p className={succeeded ? 'result-message' : 'result-message hidden'}>\n        Payment succeeded, see the result in your\n        <a\n          href='https://dashboard.stripe.com/test/payments'\n        >\n          {' '}\n          Stripe dashboard.\n        </a> Refresh the page to pay again.\n      </p>\n    </form>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}