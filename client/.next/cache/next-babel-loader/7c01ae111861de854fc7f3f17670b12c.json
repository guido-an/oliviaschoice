{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Guido/Desktop/pharmashop/client/contexts/CartContext.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nexport var CartContext = /*#__PURE__*/createContext();\nvar service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\n\nvar CartContextProvider = function CartContextProvider(props) {\n  _s();\n\n  var _useState = useState([]),\n      productsInCart = _useState[0],\n      setProductsInCart = _useState[1];\n\n  var _useState2 = useState(null),\n      shippingInfo = _useState2[0],\n      setShippingInfo = _useState2[1];\n\n  var _useState3 = useState(false),\n      renderPage = _useState3[0],\n      setRenderPage = _useState3[1]; // without this localStorage in addProductToLocalStorage would be undefined (rendered on the server)\n\n\n  useEffect(function () {\n    var productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'));\n    setProductsInCart(productsFromLocalStorage);\n    setRenderPage(true);\n  }, []);\n\n  var addProductToLocalStorage = function addProductToLocalStorage() {\n    if (renderPage) {\n      console.log('add to local storage', productsInCart);\n      localStorage.setItem('productsInCart', JSON.stringify(productsInCart));\n    }\n  };\n\n  var addToCart = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(product, quantityFromInput) {\n      var productIsInCart;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              productIsInCart = false;\n              productsInCart && productsInCart.forEach(function (productInCart) {\n                if (productInCart._id === product._id) {\n                  productIsInCart = true;\n                  product.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput);\n                }\n              });\n\n              if (!productsInCart) {\n                product.boughtQuantity = Number(quantityFromInput);\n                setProductsInCart([product]);\n              } else if (productIsInCart) {\n                setProductsInCart(_toConsumableArray(productsInCart));\n              } else {\n                product.boughtQuantity = Number(quantityFromInput);\n                setProductsInCart([].concat(_toConsumableArray(productsInCart), [product]));\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function addToCart(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(); // it needs to be called when addToCart finish executing\n\n\n  addProductToLocalStorage();\n\n  var updateCart = function updateCart(productInCart, quantityFromInput) {\n    var updateArray = productsInCart.map(function (product) {\n      if (product._id === productInCart._id) {\n        product.boughtQuantity = Number(quantityFromInput);\n      }\n\n      return product;\n    });\n    setProductsInCart(updateArray);\n  };\n\n  var defineShippingInfo = function defineShippingInfo(form) {\n    setShippingInfo(form);\n  };\n\n  return __jsx(CartContext.Provider, {\n    value: {\n      productsInCart: productsInCart,\n      setProductsInCart: setProductsInCart,\n      addToCart: addToCart,\n      updateCart: updateCart\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\n_s(CartContextProvider, \"uTzvFqgwV8ZN4SrDaQaoZrklbVk=\");\n\n_c = CartContextProvider;\nexport default CartContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["/Users/Guido/Desktop/pharmashop/client/contexts/CartContext.js"],"names":["createContext","useState","useEffect","axios","CartContext","service","create","baseURL","process","env","APP_API","withCredentials","CartContextProvider","props","productsInCart","setProductsInCart","shippingInfo","setShippingInfo","renderPage","setRenderPage","productsFromLocalStorage","JSON","parse","localStorage","getItem","addProductToLocalStorage","console","log","setItem","stringify","addToCart","product","quantityFromInput","productIsInCart","forEach","productInCart","_id","boughtQuantity","Number","updateCart","updateArray","map","defineShippingInfo","form","children"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from 'react'\nimport axios from 'axios'\n\nexport const CartContext = createContext()\n\nconst service = axios.create({\n  baseURL: process.env.APP_API,\n  withCredentials: true\n})\n\nconst CartContextProvider = props => {\n  const [productsInCart, setProductsInCart] = useState([])\n  const [shippingInfo, setShippingInfo] = useState(null)\n  const [renderPage, setRenderPage] = useState(false) // without this localStorage in addProductToLocalStorage would be undefined (rendered on the server)\n\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'))\n    setProductsInCart(productsFromLocalStorage)\n    setRenderPage(true)\n  }, [])\n\n  const addProductToLocalStorage = () => {\n    if (renderPage) {\n      console.log('add to local storage', productsInCart)\n      localStorage.setItem('productsInCart', JSON.stringify(productsInCart))\n    }\n  }\n\n  const addToCart = async (product, quantityFromInput) => {\n    let productIsInCart = false\n    productsInCart && productsInCart.forEach(productInCart => {\n      if (productInCart._id === product._id) {\n        productIsInCart = true\n        product.boughtQuantity = Number(productInCart.boughtQuantity) + Number(quantityFromInput)\n      }\n    })\n    if (!productsInCart) {\n      product.boughtQuantity = Number(quantityFromInput)\n      setProductsInCart([product])\n    } else if (productIsInCart) {\n      setProductsInCart([...productsInCart])\n    } else {\n      product.boughtQuantity = Number(quantityFromInput)\n      setProductsInCart([...productsInCart, product])\n    }\n  }\n\n  // it needs to be called when addToCart finish executing\n  addProductToLocalStorage()\n  const updateCart = (productInCart, quantityFromInput) => {\n    const updateArray = productsInCart.map(product => {\n      if (product._id === productInCart._id) {\n        product.boughtQuantity = Number(quantityFromInput)\n      }\n      return product\n    })\n    setProductsInCart(updateArray)\n  }\n\n  const defineShippingInfo = form => {\n    setShippingInfo(form)\n  }\n\n  return (\n    <CartContext.Provider value={{ productsInCart, setProductsInCart, addToCart, updateCart }}>\n      {props.children}\n    </CartContext.Provider>\n  )\n}\n\nexport default CartContextProvider\n"]},"metadata":{},"sourceType":"module"}