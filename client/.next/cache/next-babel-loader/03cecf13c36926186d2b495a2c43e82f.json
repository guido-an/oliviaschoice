{"ast":null,"code":"var _jsxFileName = \"/Users/Guido/Desktop/pharmashop/client/components/CheckoutForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useContext } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from 'axios';\nconst service = axios.create({\n  // to update the order\n  baseURL: process.env.APP_API,\n  withCredentials: true\n});\nexport default function CheckoutForm() {\n  const {\n    0: succeeded,\n    1: setSucceeded\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: processing,\n    1: setProcessing\n  } = useState('');\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(true);\n  const {\n    0: clientSecret,\n    1: setClientSecret\n  } = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart')); // Create PaymentIntent as soon as the page loads\n\n    window.fetch(process.env.APP_API + '/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        items: productsFromLocalStorage\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: '#32325d',\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#32325d'\n        }\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : '');\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: 'test@gmail.com',\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true); // Our code\n\n      var orderId = localStorage.getItem('orderId');\n      service.post('/update-order', {\n        _id: orderId\n      });\n      localStorage.removeItem('productsInCart');\n      localStorage.removeItem('orderId');\n      window.location.assign(\"/\");\n    } // end\n\n  };\n\n  return __jsx(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, __jsx(CardElement, {\n    id: \"card-element\",\n    options: cardStyle,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    disabled: processing || disabled || succeeded,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, processing ? __jsx(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }) : 'Pay')), error && __jsx(\"div\", {\n    className: \"card-error\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, error), __jsx(\"p\", {\n    className: succeeded ? 'result-message' : 'result-message hidden',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, \"Payment succeeded, see the result in your\", __jsx(\"a\", {\n    href: \"https://dashboard.stripe.com/test/payments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, ' ', \"Stripe dashboard.\"), \" Refresh the page to pay again.\"));\n}","map":{"version":3,"sources":["/Users/Guido/Desktop/pharmashop/client/components/CheckoutForm.js"],"names":["useState","useEffect","useContext","CardElement","useStripe","useElements","axios","service","create","baseURL","process","env","APP_API","withCredentials","CheckoutForm","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","productsFromLocalStorage","JSON","parse","localStorage","getItem","window","fetch","method","headers","body","stringify","items","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","receipt_email","payment_method","card","getElement","orderId","post","_id","removeItem","location","assign"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from 'react'\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from '@stripe/react-stripe-js'\nimport axios from 'axios'\n\nconst service = axios.create({ // to update the order\n  baseURL: process.env.APP_API,\n  withCredentials: true\n})\n\n\nexport default function CheckoutForm () {\n  const [succeeded, setSucceeded] = useState(false)\n  const [error, setError] = useState(null)\n  const [processing, setProcessing] = useState('')\n  const [disabled, setDisabled] = useState(true)\n  const [clientSecret, setClientSecret] = useState('')\n  const stripe = useStripe()\n  const elements = useElements()\n\n  useEffect(() => {\n    const productsFromLocalStorage = JSON.parse(localStorage.getItem('productsInCart'))\n    // Create PaymentIntent as soon as the page loads\n    window\n      .fetch(process.env.APP_API + '/create-payment-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ items: productsFromLocalStorage })\n      })\n      .then(res => {\n        return res.json()\n      })\n      .then(data => {\n        setClientSecret(data.clientSecret)\n      })\n  }, [])\n  const cardStyle = {\n    style: {\n      base: {\n        color: '#32325d',\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#32325d'\n        }\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n    }\n  }\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty)\n    setError(event.error ? event.error.message : '')\n  }\n  const handleSubmit = async ev => {\n    ev.preventDefault()\n    setProcessing(true)\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: 'test@gmail.com',\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    })\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`)\n      setProcessing(false)\n    } else {\n      setError(null)\n      setProcessing(false)\n      setSucceeded(true)\n      // Our code\n      var orderId = localStorage.getItem('orderId')\n      service.post('/update-order', {\n        _id: orderId\n      })\n      localStorage.removeItem('productsInCart') \n      localStorage.removeItem('orderId')\n      window.location.assign(\"/\");\n    }\n    // end\n  }\n  return (\n    <form id='payment-form' onSubmit={handleSubmit}>\n      <CardElement id='card-element' options={cardStyle} onChange={handleChange} />\n      <button\n        disabled={processing || disabled || succeeded}\n        id='submit'\n      >\n        <span id='button-text'>\n          {processing ? (\n            <div className='spinner' id='spinner' />\n          ) : (\n            'Pay'\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className='card-error' role='alert'>\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      <p className={succeeded ? 'result-message' : 'result-message hidden'}>\n        Payment succeeded, see the result in your\n        <a\n          href='https://dashboard.stripe.com/test/payments'\n        >\n          {' '}\n          Stripe dashboard.\n        </a> Refresh the page to pay again.\n      </p>\n    </form>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}